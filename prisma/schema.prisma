generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Inquiry {
  id      Int     @id @default(autoincrement())
  name    String
  email   String
  subject String?
  message String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  cid    Int    @id @default(autoincrement())
  label  String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Watcher {
  wid     Int       @id @default(autoincrement())
  start   DateTime  @default(now())
  end     DateTime?
  timerId Int
  timer   Timer     @relation(fields: [timerId], references: [timerId], onDelete: Cascade)
}

model Timer {
  timerId         Int       @id @default(autoincrement())
  description String?
  startDate   DateTime  @default(now())
  duration    Int?
  userId      String
  status    String? @default("start")
  category    String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  watchers    Watcher[]
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  timers        Timer[]
  links Link[]
}

model Link {
  lid Int @id @default(autoincrement())
  label String
  refer String
  category  String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
