import Head from "next/head";
import Image from "next/image";
import { getSession, useSession } from "next-auth/react";
import { useState, useEffect } from "react";
import { prisma } from "@/auth";
import { Category } from "@/components/category";
import { fetcher } from "lib/fetcher";

export default function Home({ data }) {
  const quotesUrl =
    "https://raw.githubusercontent.com/JamesFT/Database-Quotes-JSON/master/quotes.json";
  const parsedData = JSON.parse(data);
  const { categories, timers, links } = parsedData;
  const [quote, setQuote] = useState();

  console.log(parsedData);

  useEffect(() => {
    const query = fetcher("/api/quotes/", { url: quotesUrl });
    query.then((r) => setQuote(r[Math.floor(Math.random() * r.length - 1)]));
  }, []);
  return (
    <div>
      <Head>
        <title>Logtree | by Nonwiz</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!parsedData.login && <div className=" p-4">Hello there!</div>}
      {parsedData.login && (
        <div className="flex flex-col sm:flex-row gap-2">
          <div className="w-auto sm:border-gray-800 sm:border-r-2 p-1 sm:h-screen sm:w-86 md:w-[60vw]">
            {parsedData.categories && <Category data={parsedData.categories} />}
            <details open>
              <summary> Inspiration </summary>
              <div className="p-2 bg-gray-300 text-gray-600 m-2 min-h-fit ">
                {quote && (
                  <div>
                    {quote.quoteText} <br />{" "}
                    <div className="text-right">- {quote.quoteAuthor}</div>
                  </div>
                )}
              </div>
            </details>
          </div>
          <div className="bg-teal-500 w-full p-2">
            {/* This is the second column or the right column when width-sm */}
            <h2>Recent Tracker </h2>
            {categories.map((item) => (
              <div
                key={item.cid}
                className="p-1 m-1 rounded-md border border-gray-600"
              >
                <h3>{item.label}</h3>
                <details open>
                  {" "}
                  <summary>Links:</summary>
                  <span className="p-4">
                    <span className="pl-2">â¤·</span>

                    {links.map(
                      (link) =>
                        link.category == item.label && (
                          <a
                            href={link.refer}
                            className="text-sky-700 hover:underline"
                            target="_blank"
                            rel="noreferrer"
                          >
                            {" "}
                            {link.label},
                          </a>
                        )
                    )}
                  </span>
                </details>
                <ul className="p-1 list-none">
                  {timers.map(
                    (time, id) =>
                      time.category == item.label && (
                        <li key={id}> {time.description} </li>
                      )
                  )}
                </ul>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

export const getServerSideProps = async ({ req, res }) => {
  const session = await getSession({ req });
  if (!session) {
    return {
      props: {
        data: {
          login: false,
        },
      },
    };
  }

  const user = await prisma.user.findUnique({
    where: {
      email: session.user.email,
    },
    select: {
      categories: {
        select: {
          cid: true,
          label: true,
        },
      },
      links: {
        select: {
          label: true,
          category: true,
          refer: true,
        },
      },
      timers: {
        select: {
          timerId: true,
          description: true,
          category: true,
          status: true,
          duration: true,
        },
      },
    },
  });

  const data =
    user &&
    JSON.stringify({
      categories: user.categories,
      timers: user.timers,
      links: user.links,
      login: true,
    });

  return {
    props: {
      data,
    },
  };
};
